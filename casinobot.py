import random
import os
from time import sleep

import telebot
# from telegram.ext import CommandHandler, Filters, MessageHandler, Updater

database = {}
bot = telebot.TeleBot("631046420:AAHgOJwxSO8g1-hN9boIJYOC-nPEWKN-mDc")

@bot.message_handler(commands=['start'])
def startBot(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, —Å–∏–º—É–ª—è—Ç–æ—Ä –∫–∞–∑–∏–Ω–æ! –ö–∞–∫ –∫ —Ç–µ–±–µ –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
    bot.register_next_step_handler(message, registerUser)


@bot.message_handler(commands=['start'])
def registerUser(message):
    user_id = message.from_user.id
    username = message.text
    bot.send_message(message.chat.id, username + '? –•–æ—Ä–æ—à–æ, —è –∑–∞–ø–æ–º–Ω–∏–ª!')
    database[user_id] = {"balance": 1000, 'dice_won': 0, 'dice_lost': 0}
    sleep(1.5)
    bot.send_message(message.chat.id, str(username) + ', —Ç–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ' + str(database[user_id]['balance']))
    mainMenu(message)

@bot.message_handler(commands=['menu'])
def mainMenu(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2)
    b_dice = telebot.types.KeyboardButton(text='–°—ã–≥—Ä–∞—Ç—å –≤ "–ö–æ—Å—Ç–∏"')
    b_slot = telebot.types.KeyboardButton(text='–°—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É')
    b_stat = telebot.types.KeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è')
    b_help = telebot.types.KeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞')
    b_reset = telebot.types.KeyboardButton(text='–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö')
    keyboard.row(b_dice, b_slot)
    keyboard.row(b_stat)
    keyboard.row(b_help, b_reset)
    bot.send_message(message.chat.id, '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', reply_markup=keyboard)


@bot.message_handler(commands=['–°—ã–≥—Ä–∞—Ç—å –≤ "–ö–æ—Å—Ç–∏"'])
def diceStart(message):
    bot.send_message(message.chat.id, text='–ö–æ—Å—Ç–∏')


@bot.message_handler(commands=['–°—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É'])
def slotStart(message):
    bot.send_message(message.chat.id, text='–°–ª–æ—Ç—ã')


@bot.message_handler(commands=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è'])
def printStats(message):
    bot.send_message(message.chat.id, text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')


@bot.message_handler(commands=['–°–ø—Ä–∞–≤–∫–∞'])
def helpMenu(message):
    bot.send_message(message.chat.id, text='–°–ø—Ä–∞–≤–∫–∞')


@bot.message_handler(commands=['–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö'])
def resetBot(message):
    bot.send_message(message.chat.id, text='–°–±—Ä–æ—Å')  


@bot.message_handler(content_types=['text'])
def textHandler(message):
    user_id = message.from_user.id
    if user_id not in database.keys():
        return bot.send_message(message.chat.id,
                                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
    text = message.text.lower()

    if text == "–ø—Ä–∏–≤–µ—Ç":
        bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! :)')
    elif text == "–ø–æ–∫–∞":
        bot.send_message(message.chat.id, text='–î–æ –≤—Å—Ç—Ä–µ—á–∏!')
    else:
        bot.send_message(message.chat.id,
                         text='–ü—Ä–æ—Å—Ç–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.')
        return mainMenu(message)

# update.message.reply_text(text="–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",      
# @bot.message_handler(content_types=['text'])
# def askGame(message):
#   text=message.text
#    if text == "1":
#        msg = bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö–æ—Å—Ç–∏"! üé≤')
#        bot.register_next_step_handler(msg, diceStart)
#    elif text == "2":
#        msg = bot.send_message(chat.id, '–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Å—ë –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
#        bot.register_next_step_handler(msg, askGame) 
#        return
#    else:
#        msg = bot.send_message(chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')	
#        bot.register_next_step_handler(msg, askGame)
#        return




if __name__ == '__main__':
    bot.polling(none_stop=True)